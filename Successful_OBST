keys = [10, 20, 30, 40]
freq = [0.1,0.2,0.4,0.3]
n = len(keys)

# Initialize cost matrix
C = [[0 for _ in range(n)] for _ in range(n)]

# Helper function to compute sum of frequencies
def sum_freq(i, j):
    return sum(freq[i:j+1])

# Fill the cost matrix
for length in range(1, n+1):  # length of the subarray
    for i in range(n - length + 1):
        j = i + length - 1
        C[i][j] = float('inf')

        # Try making all keys in interval keys[i..j] as root
        for r in range(i, j+1):
            cost_left = C[i][r-1] if r > i else 0
            cost_right = C[r+1][j] if r < j else 0
            total_cost = cost_left + cost_right + sum_freq(i, j)

            if total_cost < C[i][j]:
                C[i][j] = total_cost

# Print the final cost matrix
for row in C:
    print(row)

# Minimum cost of OBST
print("Minimum cost of OBST:", C[0][n-1])
